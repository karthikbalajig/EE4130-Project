# -*- coding: utf-8 -*-
"""DataScience Final Proj1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KsrRxuURiQuglvNl8hGzsg4Kk78MEbyW

## Library Imports
"""

!pip install astroML --quiet

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from matplotlib import pyplot as plt

from sklearn.decomposition import PCA

from astroML.datasets import sdss_corrected_spectra

# %matplotlib inline

"""#### Importing Data and interpolating the missing values """

data = sdss_corrected_spectra.fetch_sdss_corrected_spectra()
spectra = sdss_corrected_spectra.reconstruct_spectra(data)
wavelengths = sdss_corrected_spectra.compute_wavelengths(data)

"""## Code Example

#### Lets plot a sample spectrum
"""

plt.figure(figsize=(10,4))
plt.plot(wavelengths,spectra[5],label="Spectrum 5")
plt.xlabel("Wavelengths")
plt.ylabel("Flux")
plt.legend()
plt.show()

"""Let us also plot the mean value of the spectra to see how it sit in comparison """

plt.figure(figsize=(10,4))
plt.plot(wavelengths,spectra[5],label="Spectrum 5")
plt.plot(wavelengths,spectra.mean(0),label="Spectrum Mean")
plt.xlabel("Wavelengths")
plt.ylabel("Flux")
plt.legend()
plt.show()

# Same code but to check over different values
sample_choice = np.random.randint(0,spectra.shape[0])
plt.figure(figsize=(10,4))
plt.plot(wavelengths,spectra[sample_choice],label=f"Spectrum {sample_choice}")
plt.plot(wavelengths,spectra.mean(0),label="Spectrum Mean")
plt.xlabel("Wavelengths")
plt.ylabel("Flux")
plt.legend()
plt.show()

"""We will use the computed values in this instance rather than the exact values because the spectra were rebuilt from masked values.


Lets choose a particular spectrum and compute its coefficients

$  \vec{x_i} = \vec{μ} + ∑_{j=1}^n a_{ij} \vec{v_j}$

$⇒ <V, \vec{x_i} - \vec{μ}>  =  a_{i} $

"""

eigen_vecs = data['evecs']
mean_spec = spectra.mean(0)

k = 15
spec = spectra[k]
coeff = np.dot(eigen_vecs, spec - mean_spec)

"""#### Finally We Add multiple components to see how well does the spectra get approximated"""

plt.figure(figsize=(10,20))
number_of_components = [0,5,10,20,50]
for i,n_c in enumerate(number_of_components): 
  plt.subplot(5,1,i+1)
  plt.plot(wavelengths,spec,'-',label=f"Spectrum {k}", c='gray')
  plt.plot(wavelengths,mean_spec + np.dot(coeff[:n_c], eigen_vecs[:n_c]),alpha=0.7,label=f"{n_c} components added")
  plt.xlabel("Wavelengths")
  plt.ylabel("Flux")
  plt.legend()
plt.show()